// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    conversations Conversation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Chat persistence models
model Conversation {
    id        String      @id @default(cuid())
    title     String?
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    userId    String
    user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    messages  Message[]
    config    ChatConfig?

    @@index([userId, createdAt])
}

model Message {
    id             String       @id @default(cuid())
    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    role           String       // "system" | "user" | "assistant"
    content        String       @db.Text
    timestamp      DateTime     @default(now())
    attachments    Attachment[]

    @@index([conversationId, timestamp])
}

model Attachment {
    id          String  @id @default(cuid())
    messageId   String
    message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    fileName    String
    fileType    String  // "image" | "document" | "audio" | "video"
    fileSize    Int     // in bytes
    mimeType    String
    cloudinaryId String
    url         String
    createdAt   DateTime @default(now())

    @@index([messageId])
}

model ChatConfig {
    id               String       @id @default(cuid())
    conversationId   String       @unique
    conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    provider         String
    model            String
    maxTokens        Int?
    temperature      Float?
    topP             Float?
    topK             Int?
    presencePenalty  Float?
    frequencyPenalty Float?
}
